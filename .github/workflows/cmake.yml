name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ubuntu-latest
  
    steps:
    - uses: actions/checkout@v2

    - name: Checkout libbitcoin system
      id: checkout-libbitcoin
      run: |
        git clone --depth 1 --branch version3 https://github.com/libbitcoin/libbitcoin-system.git
        cd libbitcoin-system
        echo "::set-output name=commit_id::`git log -n 1 --pretty=format:"%H"`"

    - name: Cache libbitcoin-system
      uses: actions/cache@v2
      id: libbitcoin-cache
      with:
        path: ~/build-bc
        key: ${{ runner.os }}-libbitcoin-build-cache-${{steps.checkout-libbitcoin.outputs.commit_id}}

    - name: Build secp256k1
      if: steps.libbitcoin-cache.outputs.cache-hit != 'true'
      run: |
        git clone --depth 1 --branch version7 --single-branch https://github.com/libbitcoin/secp256k1
        cd secp256k1
        ./autogen.sh
        ./configure --disable-tests --enable-module-recovery --prefix $HOME/build-bc
        make
        make install
        cd ${{github.workspace}}

    - name: Build libbitcoin-system
      if: steps.libbitcoin-cache.outputs.cache-hit != 'true'
      run: |
        cd libbitcoin-system
        CC=$CC CXX=$CXX ./install.sh --enable-isystem --disable-static --build-boost --prefix=$HOME/build-bc CFLAGS='-Os -s' CXXFLAGS='-Os -s'
            
    - name: Configure CMake
      run: PKG_CONFIG_PATH=$HOME/build-bc/lib/pkgconfig/ cmake -DBOOST_ROOT=$HOME/build-bc -S ${{github.workspace}}/channels -B ${{github.workspace}}/channels/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        CC: gcc-10
        CXX: g++-10
        
    - name: Build CMake
      run: cmake --build ${{github.workspace}}/channels/build --config ${{env.BUILD_TYPE}}
        
    - name: Run tests
      run: ctest --test-dir ${{github.workspace}}/channels/build -C ${{env.BUILD_TYPE}}

  test_simulations:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=80 --statistics
      - name: Test with pytest
        run: |
          pytest
