name: CMake

on:
  push:
    branches: [ main, travis ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: boost
      run: sudo apt-get update && sudo apt-get install -yq libboost1.72-dev

    - name: Cache libbitcoin-system
      uses: actions/cache@v2
      with:
        path: ${{github.workspace}}/libbitcoin-system/
        key: ${{ runner.os }}-libbitcoin-system

    - name: Build libbitcoin-system
      run: git clone https://github.com/libbitcoin/libbitcoin-system.git
      run: cd libbitcoin-system
      run: CC=$CC CXX=$CXX ./install.sh --enable-isystem --disable-static --prefix=${{github.workspace}}/libbitcoin-system CFLAGS='-Os -s' CXXFLAGS='-Os -s'
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}}/channels -B ${{github.workspace}}/channels/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/channels/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --test-dir ${{github.workspace}}/channels/build -C ${{env.BUILD_TYPE}}
      
